class <%= name.classify.pluralize %>Api < Grape::API
  desc 'Get a list of <%= name.underscore.tableize %>', entity: <%= name.classify %>Entity
  params do
    optional :ids, type: String, desc: 'comma separated <%= name.underscore %> ids'
  end
  get do
    <%= name.underscore.tableize %> = <%= name.classify %>.filter(declared(params, include_missing: false))
    present <%= name.underscore.tableize %>, with: <%= name.classify %>Entity
  end

  desc 'Create an <%= name.underscore %>', entity: <%= name.classify %>Entity
  params do
  end

  post do
    <%= name.underscore %> = <%= name.classify %>.create(declared(params, include_missing: false))
    error!(present_error(:record_invalid, <%= name.underscore %>.errors.full_messages)) unless <%= name.underscore %>.errors.empty?
    present <%= name.underscore %>, with: <%= name.classify %>Entity
  end

  params do
    requires :id, desc: 'ID of the <%= name.underscore %>'
  end
  route_param :id do
    desc 'Get an <%= name.underscore %>', entity: <%= name.classify %>Entity
    get do
      <%= name.underscore %> = <%= name.classify %>.find(params[:id])
      present <%= name.underscore %>, with: <%= name.classify %>Entity
    end

    desc 'Update an <%= name.underscore %>', entity: <%= name.classify %>Entity
    params do
    end
    put do
      # fetch <%= name.underscore %> record and update attributes.  exceptions caught in app.rb
      <%= name.underscore %> = <%= name.classify %>.find(params[:id])
      <%= name.underscore %>.update_attributes!(declared(params, include_missing: false)
      present <%= name.underscore %>, with: <%= name.classify %>Entity
    end
  end
end
