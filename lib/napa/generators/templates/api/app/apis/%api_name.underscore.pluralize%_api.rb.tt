class <%= api_name.classify %>sApi < Grape::API
  represent <%= api_name.classify %>, with: <%= api_name.classify %>Entity
  desc 'Get a list of <%= api_name.underscore/pluralize %>', entity: <%= api_name.classify %>Entity
  params do
    optional :ids, type: String, desc: 'comma separated <%= api_name.underscore %> ids'
  end
  get do
    <%= api_name.underscore/pluralize %> = <%= api_name.classify %>.filter(permitted_params)
    present <%= api_name.underscore/pluralize %>
  end

  desc 'Create an <%= api_name.underscore %>', entity: <%= api_name.classify %>Entity
  params do
  end

  post do
    begin
      <%= api_name.underscore %> = <%= api_name.classify %>.create(permitted_params.merge(created_by: current_user))
    rescue NameError
      error!(present_error(:kind_not_found))
    end
    error!(present_error(:record_invalid, <%= api_name.underscore %>.errors.full_messages)) unless <%= api_name.underscore %>.errors.empty?
    present <%= api_name.underscore %>
  end

  params do
    requires :id, desc: 'ID of the <%= api_name.underscore %>'
  end
  route_param :id do
    desc 'Get an <%= api_name.underscore %>', entity: <%= api_name.classify %>Entity
    get do
      <%= api_name.underscore %> = <%= api_name.classify %>.find(params[:id])
      present <%= api_name.underscore %>
    end

    desc 'Update an <%= api_name.underscore %>', entity: <%= api_name.classify %>Entity
    params do
    end
    put do
      # fetch <%= api_name.underscore %> record and update attributes.  exceptions caught in app.rb
      <%= api_name.underscore %> = <%= api_name.classify %>.find(params[:id])
      <%= api_name.underscore %>.update_attributes!(permitted_params.select { |param, value| value.present? })
      present <%= api_name.underscore %>
    end
  end
end
